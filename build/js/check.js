// var a;
// var b;

function getMessage (a, b) {

// Если первый аргумент, a, имеет тип boolean, то:
//     Если он true, вернуть строку, в которую подставлен параметр b:
//     "Переданное GIF-изображение анимировано и содержит [b] кадров"
//     Если он false, то вернуть строку:
//     "Переданное GIF-изображение не анимировано"

if (typeof ( a ) == boolean) {
    return "Переданное GIF-изображение анимировано и содержит [b] кадров";
} else {
    return "Переданное GIF-изображение не анимировано";
}



// Если первый аргумент имеет числовой тип, то вернуть строку:
//     "Переданное SVG-изображение содержит [a] объектов и [b * 4] атрибутов"

else if (typeof ( a ) == number) {
    return "Переданное SVG-изображение содержит [a] объектов и [b * 4] атрибутов";
}



// Если первый аргумент массив, то вернуть строку:
//     "Количество красных точек во всех строчках изображения: [amountOfRedPoints]"
//     где [amountOfRedPoints] — это сумма значений переданного массива

else if (Array.isArray(a)) { // проверка массив ли a
  var amountOfRedPoints = 0;
  for (var i = 0, i < a.length; i++) {
    amountOfRedPoints += a[i];
  }
  return "Количество красных точек во всех строчках изображения: [amountOfRedPoints]"
}



// Если оба аргумента массивы, то вернуть строку:
//     "Общая площадь артефактов сжатия: [artifactsSquare] пикселей"
//     где [artifactsSquare] — это сумма произведений соответствующих элементов массивов a и b,
//     cумма произведения первого элемента a с первым элементом b, второго со вторым и так далее

else if (Array.isArray(a) && Array.isArray(b)) { // проверка массивы ли a и b
  var artifactsSquare = 0;
  for (var i = 0, i < a.length; i++) {
    artifactsSquare += a[i] * b[i];
  }
  return "Общая площадь артефактов сжатия: [artifactsSquare] пикселей"
}



}

getMessage (a, b);
